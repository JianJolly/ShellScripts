#!/bin/bash
#

red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
NC="\e[0m" # No Color

name=$(git remote -v | head -n1 | awk '{print $2}' | sed -e 's,.*:\(.*/\)\?,,' -e 's/\.git$//')

exec < /dev/tty

while true; do
  read -n 1 -p "$name installieren? [y/n]: " yn
  echo;
  case $yn in
    [Yy]* )
      
    break;;
    [Nn]* ) exit;;
    * ) echo "Bitte mit yes oder no antworten.";;
  esac
done

if [ -f description-pak ]
then
  echo -e "LÃ¶sche ${yellow}description-pak${NC}"
  sudo rm description-pak
fi

if [ -f autogen.sh ]
then
  echo -e "Starte ${green}autogen.sh${NC}"
  ./autogen.sh;
fi

release=$(($(git rev-list HEAD --count) - 1))
source=$(git config --get remote.origin.url)
version=""
maintainer=""
license=""
requires=""
summary=""
group=""
architecture=""


if [ -f "debian/changelog" ]
then
  echo -e "Verwende: ${green}debian/changelog${NC}"
  if [ "$version" == "" ]; then version=$(head -1 "debian/changelog" | gawk -F " " '{print $2}' |  tr -d "()"); fi
fi

if [ -f "debian/control" ]
then
  echo -e "Verwende: ${green}debian/control${NC}"
  if [ "$architecture" == "" ]; then architecture=$(grep '^ *Architecture *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$requires" == "" ]; then requires=$(grep '^ *Depends *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$maintainer" == "" ]; then maintainer=$(grep '^ *Maintainer *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$group" == "" ]; then group=$(grep '^ *Section *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$summary" == "" ]; then summary=$(grep '^ *Description *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
fi

if [ -f "setup.py" ]
then
  echo -e "Verwende: ${green}setup.py${NC}"
  if [ "$maintainer" == "" ]; then maintainer=$(./setup.py --author); fi
  if [ "$maintainermail" == "" ]; then maintainermail=$(./setup.py --author-email); fi
  if [ "$version" == "" ]; then version=$(./setup.py --version); fi
  if [ "$license" == "" ]; then license=$(./setup.py --license); fi
  if [ "$requires" == "" ]; then requires=$(./setup.py --requires); fi
  if [ "$summary" == "" ]; then summary=$(./setup.py --description); echo "$summary" > description-pak; fi
fi

if [ -f "Makefile" ]
then
  echo -e "Verwende: ${green}Makefile${NC}"
  if [ "$version" == "" ]; then version=$(grep '^ *PACKAGE_VERSION *= *' Makefile | gawk -F "=" '{print $2}' |  tr -d " "); fi
  
fi

if [ -f "$name.spec" ]
then
  echo -e "Verwende: ${green}$name.spec${NC}"
  if [ "$license" == "" ]; then license=$(grep '^ *License *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$group" == "" ]; then group=$(grep '^ *Group *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$summary" == "" ]; then summary=$(grep '^ *Summary *' "$name.spec" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
  
  if [ "$requires" == "" ]; then requires=$(grep '^ *Requires *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " " | tr '\n' ',' | sed -e 's/^,*//' -e 's/,*$//'); fi
fi

if [ -f "setup.py" ]
then
  echo -e "Installiere mit ${green}checkinstall ... python setup.py install${NC}"
  # --spec foo -> forget the ugly spec file
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$source"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\" python setup.py install
else
  if [ -f configure ]
  then
    ./configure;
  fi
  if [ -f "Makefile" ]
  then
    make
  fi
  # --spec foo -> forget the ugly spec file
  
  echo -e "Installiere mit ${green}checkinstall ...${NC}"
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$source"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\"
fi

exit 0

