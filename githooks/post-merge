#!/bin/bash
#
# TODO curl "https://api.github.com/search/repositories?q=+repo:nicolargo/glances" | jq '.items[].description'

red="\e[0;31m"
green="\e[0;32m"
yellow="\e[0;33m"
NC="\e[0m" # No Color

# GIT
source=$(git config --get remote.origin.url)
name=$(echo $source | gawk -F "/" '{print $5}' | sed -e 's/\.git$//')
gitowner=$(echo $source | gawk -F "/" '{print $4}')
release=$(($(git rev-list HEAD --count) - 1))

domain=$(echo $source | gawk -F "/" '{print $3}')
if [ "$domain" == "github.com" ]
then
  echo -e "${green}Gehostet auf GitHub, API kann verwendet werden. (Wird sie aber noch nicht ;c))${NC}"
  description=$(curl -s "https://api.github.com/search/repositories?q=+repo:$gitowner/$name" | jq '.items[].description')
fi

exec < /dev/tty

while true; do
  read -n 1 -p "$name installieren? [y/n]: " yn
  echo;
  case $yn in
    [Yy]* )
      
    break;;
    [Nn]* ) exit;;
    * ) echo "Bitte mit yes oder no antworten.";;
  esac
done

if [ -f description-pak ]
then
  echo -e "Lösche ${yellow}description-pak${NC}"
  sudo rm description-pak
fi

if [ -f autogen.sh ]
then
  echo -e "Starte ${green}autogen.sh${NC}"
  ./autogen.sh;
fi

if [ -f configure ]
then
  echo -e "Starte ${green}configure${NC}"
  ./configure;
fi

if [ -f "Makefile" ]
then
  echo -e "Starte ${green}make${NC}"
  make
fi


version=""
maintainer=""
license=""
requires=""
summary=""
group=""
architecture=""


if [ -f "debian/changelog" ]
then
  echo -e "Verwende: ${green}debian/changelog${NC}"
  if [ "$version" == "" ]; then version=$(head -1 "debian/changelog" | gawk -F " " '{print $2}' |  tr -d "()"); fi
fi

if [ -f "debian/control" ]
then
  echo -e "Verwende: ${green}debian/control${NC}"
  if [ "$architecture" == "" ]; then architecture=$(grep '^ *Architecture *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$requires" == "" ]; then requires=$(grep '^ *Depends *' "debian/control" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$maintainer" == "" ]; then maintainer=$(grep '^ *Maintainer *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$group" == "" ]; then group=$(grep '^ *Section *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); fi
  if [ "$summary" == "" ]; then summary=$(grep '^ *Description *' "debian/control" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
fi

if [ -f "Makefile" ]
then
  echo -e "Verwende: ${green}Makefile${NC}"
  if [ "$version" == "" ]; then version=$(grep '^ *PACKAGE_VERSION *= *' Makefile | gawk -F "=" '{print $2}' |  tr -d " "); fi
  if [ "$version" != "" ]; then echo -e "\tVersion: ${green}$version${NC}"; fi
fi

if [ -f "$name.spec" ]
then
  echo -e "Verwende: ${green}$name.spec${NC}"
  if [ "$license" == "" ]; then license=$(grep '^ *License *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$license" != "" ]; then echo -e "\tLicense: ${green}$license${NC}"; fi
  
  if [ "$group" == "" ]; then group=$(grep '^ *Group *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " "); fi
  if [ "$group" != "" ]; then echo -e "\tGroup: ${green}$group${NC}"; fi
  
  if [ "$summary" == "" ]; then summary=$(grep '^ *Summary *' "$name.spec" | gawk -F ":" '{print $2}' | sed -e 's/^ *//' -e 's/ *$//'); echo "$summary" > description-pak; fi
  if [ "$summary" != "" ]; then echo -e "\tSummary: ${green}$summary${NC}"; fi
  
  if [ "$requires" == "" ]; then requires=$(grep '^ *Requires *' "$name.spec" | gawk -F ":" '{print $2}' |  tr -d " " | tr '\n' ',' | sed -e 's/^,*//' -e 's/,*$//'); fi
  if [ "$requires" != "" ]; then echo -e "\tRequires: ${green}$requires${NC}"; fi
fi

if [ -f "setup.py" ]
then
  if [ ! -x "setup.py" ]
  then
    echo -e "${red}setup.py ist nicht ausführbar -> Abbruch.${NC}"
    exit
  else
    echo -e "Verwende: ${green}setup.py${NC}"
    if [ "$maintainer" == "" ]; then maintainer=$(./setup.py --author); fi
    if [ "$maintainer" != "" ]; then echo -e "\tMaintainer: ${green}$maintainer${NC}"; fi
    
    if [ "$maintainermail" == "" ]; then maintainermail=$(./setup.py --author-email); fi
    if [ "$maintainermail" != "" ]; then echo -e "\tMaintainer eMail: ${green}$maintainermail${NC}"; fi
    
    if [ "$version" == "" ]; then version=$(./setup.py --version); fi
    if [ "$version" != "" ]; then echo -e "\tVersion: ${green}$version${NC}"; fi
    
    if [ "$license" == "" ]; then license=$(./setup.py --license); fi
    if [ "$license" != "" ]; then echo -e "\tLicense: ${green}$license${NC}"; fi
    
    if [ "$requires" == "" ]; then requires=$(./setup.py --requires); fi
    if [ "$requires" != "" ]; then echo -e "\tRequires: ${green}$requires${NC}"; fi
    
    if [ "$summary" == "" ]; then summary=$(./setup.py --description); echo "$summary" > description-pak; fi
    if [ "$summary" != "" ]; then echo -e "\tSummary: ${green}$summary${NC}"; fi
  fi
fi





if [ -f "setup.py" ]
then
  echo -e "Installiere mit ${green}checkinstall ... python setup.py install${NC}"
  # --spec foo -> forget the ugly spec file
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$source"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\" python setup.py install
else
  
  # --spec foo -> forget the ugly spec file
  
  echo -e "Installiere mit ${green}checkinstall ...${NC}"
  sudo checkinstall --spec foo --maintainer \""$maintainer ($maintainermail)"\" --pkglicense \""$license"\" --pkgname \""$name"\" --pkgrelease \""$release"\" --pkgversion \""$version"\" --pkgsource \""$source"\" --pkggroup \""$group"\" --requires \""$requires"\" --pkgarch \""$architecture"\"
fi

exit 0













